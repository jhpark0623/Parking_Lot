<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.boot.parking.mapper.ParkingMapper">

	<!-- 차량 번호판 생성 시 잘못된 데이터 필터 -->
	<select id="checkDupl" parameterType="String"
		resultType="parking">
		select * from parking
		where car_num = #{car_num}
		and state =
		'Y'
	</select>

	<!-- 차량 번호판 등록(입차) -->
	<insert id="entry" parameterType="parking"
		useGeneratedKeys="true">
		<selectKey keyProperty="pid" resultType="int" order="BEFORE">
			SELECT
			nvl(MAX(pid), 0) + 1 FROM parking
		</selectKey>

		insert into parking values(#{pid}, #{car_num}, sysdate, '', default,
		DEFAULT, #{pspace_id})
	</insert>

	<!-- sid 를 매개변수로 pspace 테이블에 해당 컬럼을 입차상태로 업데이트 -->
	<update id="updatePspaceIn" parameterType="int">
		update pspace set
		state = 'Y' where sid = #{sid}
	</update>

	<!-- parking table 전체 데이터의 수를 반환 -->
	<select id="count" resultType="int">
		select count(*) from parking
	</select>

	<!-- parking table 전체 데이터 리스트를 반환 -->
	<select id="pkList" parameterType="page" resultType="plist">
		<![CDATA[
			select p.*, a.amount from
			(select row_number() over(order by pid desc) rnum, p.* from parking p) p
			left join amount a on a.parking_id = p.pid
			where rnum >= #{startNo} and rnum <= #{endNo} order by p.rnum
		]]>
	</select>

	<!-- 조건에 맞는 검색된 기록의 수를 반환 -->
	<select id="sCount" parameterType="parking" resultType="int">
		select count(*) from parking
		where car_num like '%' || #{car_num} ||
		'%'
		<if test="in_time != null">
			and in_time like '%' || #{in_time} || '%'
		</if>
	</select>

	<!-- 조건에 맞는 검색 결과 리스트를 반환 -->
	<select id="pkSearchDetail" parameterType="page"
		resultType="plist">
		<![CDATA[
			select p.*, a.amount from
			(select row_number() over(order by pid desc) rnum, p.* from parking p
			where car_num like '%' || #{car_num} || '%' 
		]]>
		<if test="in_time != null">
			and in_time like '%' || #{in_time} || '%'
		</if>
		<![CDATA[
			) p left join amount a on a.parking_id = p.pid
			where rnum >= #{startNo} and rnum <= #{endNo}
			order by pid desc
		]]>
	</select>

	<!-- pspace 테이블 전체 리스트를 반환 -->
	<select id="getPspace" resultType="pspace" parameterType="int">
		select
		* from pspace where floor = #{floor}
	</select>

	<!-- pspace 테이블의 sid를 매개변수로 PspaceDetail 객체를 반환 -->
	<select id="getPspaceDetail" parameterType="int"
		resultType="pspacedetail">
		select s.*, p.car_num, p.in_time from pspace s, parking p
		where s.sid = #{sid} and p.state = 'Y'
		and s.sid = p.pspace_id

	</select>


	<!-- ================================================================================= -->

	<!-- 주차된 차량 조회(뒷 4자리로 조회 / 중복 차량 리스트로 출력) -->
	<select id="search" resultType="parking">
		select * from parking where
		car_num like'%' || #{keyword} || '%' and state = 'Y'
	</select>

	<!-- 주차된 차량 조회(전체 번호로 조회하여 특정 차량 한 대만 출력) -->
	<select id="pcar" parameterType="String" resultType="parking">
		select *
		from parking where car_num = #{cnum} AND state = 'Y'
	</select>

	<!-- 주차 요금 정산 정보 저장 -->
	<insert id="insertAmount" parameterType="amount">
		INSERT INTO amount (aid,
		parking_id, amount, pay_time)
		VALUES ((SELECT COUNT(*) FROM AMOUNT) +
		1, #{parking_id}, #{amount},
		TO_DATE(#{pay_time},
		'YYYY-MM-DD
		HH24:MI:SS'))
	</insert>

	<!-- parking TABLE 출차 차량 정보 업데이트 -->
	<update id="updateParkingOut" parameterType="parking">
		UPDATE parking
		SET
		state = 'N',
		out_time = TO_DATE(#{out_time}, 'YYYY-MM-DD HH24:MI:SS')
		WHERE pid = #{pid}
	</update>

	<!-- amount table의 parking_id 를 매개변수로 pspace table의 state를 업데이트 -->
	<update id="updatePspaceOut" parameterType="int">
		update pspace set
		state = 'N' where sid = (select
		pspace_id from parking where pid =
		#{parking_id})
	</update>

	<!-- 할인 시간(dc_time) 업데이트 -->
	<update id="updateDcTime" parameterType="map">
		update parking
		set
		dc_time = #{dc_time}
		where pid = #{pid}
	</update>

</mapper>